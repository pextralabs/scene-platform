package br.ufes.inf.lprm.scene.base;

import br.ufes.inf.lprm.scene.model.impl.Situation;
import br.ufes.inf.lprm.situation.model.SituationType;
import br.ufes.inf.lprm.situation.model.Part;
import br.ufes.inf.lprm.situation.model.events.*
import br.ufes.inf.lprm.scene.util.*;



declare SituationEvent
	@role(event)
	@timestamp(timestamp)
end

rule "SituationActivation"
    salience 1
	when
		$act: OnGoingSituation(situation == null, $type: type, $cast: cast, $timestamp: timestamp)
	then
		$act.setSituation(SituationHelper.activateSituation(drools, $cast, $type, $timestamp));
		update($act);
end

rule "SituationDeactivation"
    salience 999
	when
		$sit: Situation(active==true)
		not (exists OnGoingSituation(situation == $sit))
	then
		SituationHelper.deactivateSituation(drools, (Object) $sit);
end

query "OnGoingSituation" (String tp, int hash)
	curr: OnGoingSituation(this.situation != null, sit: this.situation, this.typename == tp, this.hashcode == hash)
end

query "SituationType" (String typeName)
	type: SituationType(name == typeName)
end

