package br.ufes.inf.lprm.scene.examples.fever;

import br.ufes.inf.lprm.scene.examples.fever.entities.Person;
import br.ufes.inf.lprm.scene.examples.fever.situations.NoFever;

import br.ufes.inf.lprm.scene.util.SituationHelper;

import br.ufes.inf.lprm.situation.annotations.part;
import br.ufes.inf.lprm.situation.model.Part;
import br.ufes.inf.lprm.situation.model.Actor;
import br.ufes.inf.lprm.situation.model.Participation;
import br.ufes.inf.lprm.situation.model.SituationType;
import br.ufes.inf.lprm.scene.model.impl.Situation;

declare Fever extends Situation
    febrile: Person @part
end
rule "Fever"
@role(situation)
@type(Fever)
    when
    	febrile: Person(temperature > 37)
    then
    	SituationHelper.situationDetected(drools);
end

rule "NoFever"
@role(situation)
@type(situations.NoFever)
    when
    	f1: Person(temperature <= 37)
    then
    	SituationHelper.situationDetected(drools);
end

declare Subscription
    type: SituationType
    part: Part
    actor: Actor
end

rule Subscription
    when
        $sub: Subscription($type: type, $part: this.part, $actor: actor)
        $sit: Situation($type == null || type == $type)
        exists (
            Participation((situation == $sit) &&
                          ($part == null || this.part == $part) &&
                          ($actor == null || actor == $actor))
        )
then
    System.out.println($sit);
end
